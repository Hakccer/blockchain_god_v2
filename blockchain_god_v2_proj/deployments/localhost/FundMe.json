{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fundingAddress",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe0df5bcfe2032503687fabce7f6261bbddfc9d1c09a86410817944d01de7c3b2",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "984071",
    "logsBloom": "0x
    "blockHash": "0x427701faa1ab3514366c93716249f9afecbee4657b26f18d9a98aff6eb1d2669",
    "transactionHash": "0xe0df5bcfe2032503687fabce7f6261bbddfc9d1c09a86410817944d01de7c3b2",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "984071",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "c34e0570f5924670be908227951d145c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundingAddress\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Patrick Collins\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"getAddressToAmountFunded(address)\":{\"params\":{\"fundingAddress\":\"the address of the funder\"},\"returns\":{\"_0\":\"the amount funded\"}}},\"title\":\"A sample Funding Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"Funds our contract based on the ETH/USD price\"},\"getAddressToAmountFunded(address)\":{\"notice\":\"Gets the amount that an address has funded\"}},\"notice\":\"This contract is for creating a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// 1. Pragma\\npragma solidity ^0.8.7;\\n// 2. Imports\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\n// 3. Interfaces, Libraries, Contracts\\nerror FundMe__NotOwner();\\n\\n/**@title A sample Funding Contract\\n * @author Patrick Collins\\n * @notice This contract is for creating a sample funding contract\\n * @dev This implements price feeds as our library\\n */\\ncontract FundMe {\\n    // Type Declarations\\n    using PriceConverter for uint256;\\n\\n    // State variables\\n    uint256 public constant MINIMUM_USD = 50 * 10**18;\\n    address private immutable i_owner;\\n    address[] private s_funders;\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    // Events (we have none!)\\n\\n    // Modifiers\\n    modifier onlyOwner() {\\n        // require(msg.sender == i_owner);\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n\\n    // Functions Order:\\n    //// constructor\\n    //// receive\\n    //// fallback\\n    //// external\\n    //// public\\n    //// internal\\n    //// private\\n    //// view / pure\\n\\n    constructor(address priceFeed) {\\n        s_priceFeed = AggregatorV3Interface(priceFeed);\\n        i_owner = msg.sender;\\n    }\\n\\n    /// @notice Funds our contract based on the ETH/USD price\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"You need to spend more ETH!\\\"\\n        );\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // Transfer vs call vs Send\\n        // payable(msg.sender).transfer(address(this).balance);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    function cheaperWithdraw() public onlyOwner {\\n        address[] memory funders = s_funders;\\n        // mappings can't be in memory, sorry!\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // payable(msg.sender).transfer(address(this).balance);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    /** @notice Gets the amount that an address has funded\\n     *  @param fundingAddress the address of the funder\\n     *  @return the amount funded\\n     */\\n    function getAddressToAmountFunded(address fundingAddress)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return s_addressToAmountFunded[fundingAddress];\\n    }\\n\\n    function getVersion() public view returns (uint256) {\\n        return s_priceFeed.version();\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\",\"keccak256\":\"0x8b9998817d38327d640f69de89cd57029888ed5ee4be8d7b71c528343839e45f\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\nlibrary PriceConverter {\\r\\n  function getPrice(AggregatorV3Interface priceFeed)\\r\\n    internal\\r\\n    view\\r\\n    returns (uint256)\\r\\n  {\\r\\n    (, int256 answer, , , ) = priceFeed.latestRoundData();\\r\\n    // ETH/USD rate in 18 digit\\r\\n    return uint256(answer * 10000000000);\\r\\n  }\\r\\n\\r\\n  // 1000000000\\r\\n  // call it get fiatConversionRate, since it assumes something about decimals\\r\\n  // It wouldn't work for every aggregator\\r\\n  function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed)\\r\\n    internal\\r\\n    view\\r\\n    returns (uint256)\\r\\n  {\\r\\n    uint256 ethPrice = getPrice(priceFeed);\\r\\n    uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\r\\n    // the actual ETH/USD conversation rate, after adjusting the extra 0s.\\r\\n    return ethAmountInUsd;\\r\\n  }\\r\\n}\",\"keccak256\":\"0xab7d80676dc221d14cd91c54314e8708d2b197b64b990984b6c3370d486ed5f5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801562000010575f80fd5b50604051620011df380380620011df833981810160405281019062000036919062000116565b8060025f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250505062000146565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f620000e082620000b5565b9050919050565b620000f281620000d4565b8114620000fd575f80fd5b50565b5f815190506200011081620000e7565b92915050565b5f602082840312156200012e576200012d620000b1565b5b5f6200013d8482850162000100565b91505092915050565b6080516110646200017b5f395f81816102bb01528181610442015281816104e301528181610664015261084e01526110645ff3fe608060405260043610610085575f3560e01c8063893d20e811610058578063893d20e81461012f5780639e87a5cd14610159578063b60d428814610183578063be2693f01461018d578063d7b4750c146101a357610085565b80630343fb25146100895780630d8e6e2c146100c55780633ccfd60b146100ef5780636b69a59214610105575b5f80fd5b348015610094575f80fd5b506100af60048036038101906100aa9190610aeb565b6101df565b6040516100bc9190610b2e565b60405180910390f35b3480156100d0575f80fd5b506100d9610225565b6040516100e69190610b2e565b60405180910390f35b3480156100fa575f80fd5b506101036102b9565b005b348015610110575f80fd5b506101196104d3565b6040516101269190610b2e565b60405180910390f35b34801561013a575f80fd5b506101436104e0565b6040516101509190610b56565b60405180910390f35b348015610164575f80fd5b5061016d610507565b60405161017a9190610bca565b60405180910390f35b61018b61052f565b005b348015610198575f80fd5b506101a1610662565b005b3480156101ae575f80fd5b506101c960048036038101906101c49190610c0d565b6108e0565b6040516101d69190610b56565b60405180910390f35b5f60015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b5f60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b8152600401602060405180830381865afa158015610290573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102b49190610c4c565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461033e576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f5b5f805490508110156103e0575f8082815481106103605761035f610c77565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505f60015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055505080806103d890610cd1565b915050610340565b505f67ffffffffffffffff8111156103fb576103fa610d18565b5b6040519080825280602002602001820160405280156104295781602001602082028036833780820191505090505b505f908051906020019061043e9291906109eb565b505f7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161048490610d72565b5f6040518083038185875af1925050503d805f81146104be576040519150601f19603f3d011682016040523d82523d5f602084013e6104c3565b606091505b50509050806104d0575f80fd5b50565b6802b5e3af16b188000081565b5f7f0000000000000000000000000000000000000000000000000000000000000000905090565b5f60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b188000061056d60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461092390919063ffffffff16565b10156105ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a590610de0565b60405180910390fd5b3460015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282546105fa9190610dfe565b925050819055505f33908060018154018082558091505060019003905f5260205f20015f9091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106e7576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f8080548060200260200160405190810160405280929190818152602001828054801561076657602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161071d575b505050505090505f5b81518110156107ec575f82828151811061078c5761078b610c77565b5b602002602001015190505f60015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055505080806107e490610cd1565b91505061076f565b505f67ffffffffffffffff81111561080757610806610d18565b5b6040519080825280602002602001820160405280156108355781602001602082028036833780820191505090505b505f908051906020019061084a9291906109eb565b505f7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161089090610d72565b5f6040518083038185875af1925050503d805f81146108ca576040519150601f19603f3d011682016040523d82523d5f602084013e6108cf565b606091505b50509050806108dc575f80fd5b5050565b5f8082815481106108f4576108f3610c77565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b5f8061092e8361095d565b90505f670de0b6b3a764000085836109469190610e31565b6109509190610e9f565b9050809250505092915050565b5f808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156109a8573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109cc9190610f41565b5050509150506402540be400816109e39190610fb8565b915050919050565b828054828255905f5260205f20908101928215610a61579160200282015b82811115610a60578251825f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a09565b5b509050610a6e9190610a72565b5090565b5b80821115610a89575f815f905550600101610a73565b5090565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610aba82610a91565b9050919050565b610aca81610ab0565b8114610ad4575f80fd5b50565b5f81359050610ae581610ac1565b92915050565b5f60208284031215610b0057610aff610a8d565b5b5f610b0d84828501610ad7565b91505092915050565b5f819050919050565b610b2881610b16565b82525050565b5f602082019050610b415f830184610b1f565b92915050565b610b5081610ab0565b82525050565b5f602082019050610b695f830184610b47565b92915050565b5f819050919050565b5f610b92610b8d610b8884610a91565b610b6f565b610a91565b9050919050565b5f610ba382610b78565b9050919050565b5f610bb482610b99565b9050919050565b610bc481610baa565b82525050565b5f602082019050610bdd5f830184610bbb565b92915050565b610bec81610b16565b8114610bf6575f80fd5b50565b5f81359050610c0781610be3565b92915050565b5f60208284031215610c2257610c21610a8d565b5b5f610c2f84828501610bf9565b91505092915050565b5f81519050610c4681610be3565b92915050565b5f60208284031215610c6157610c60610a8d565b5b5f610c6e84828501610c38565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f610cdb82610b16565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610d0d57610d0c610ca4565b5b600182019050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b5f81905092915050565b50565b5f610d5d5f83610d45565b9150610d6882610d4f565b5f82019050919050565b5f610d7c82610d52565b9150819050919050565b5f82825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f7265204554482100000000005f82015250565b5f610dca601b83610d86565b9150610dd582610d96565b602082019050919050565b5f6020820190508181035f830152610df781610dbe565b9050919050565b5f610e0882610b16565b9150610e1383610b16565b9250828201905080821115610e2b57610e2a610ca4565b5b92915050565b5f610e3b82610b16565b9150610e4683610b16565b9250828202610e5481610b16565b91508282048414831517610e6b57610e6a610ca4565b5b5092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f610ea982610b16565b9150610eb483610b16565b925082610ec457610ec3610e72565b5b828204905092915050565b5f69ffffffffffffffffffff82169050919050565b610eed81610ecf565b8114610ef7575f80fd5b50565b5f81519050610f0881610ee4565b92915050565b5f819050919050565b610f2081610f0e565b8114610f2a575f80fd5b50565b5f81519050610f3b81610f17565b92915050565b5f805f805f60a08688031215610f5a57610f59610a8d565b5b5f610f6788828901610efa565b9550506020610f7888828901610f2d565b9450506040610f8988828901610c38565b9350506060610f9a88828901610c38565b9250506080610fab88828901610efa565b9150509295509295909350565b5f610fc282610f0e565b9150610fcd83610f0e565b9250828202610fdb81610f0e565b91507f800000000000000000000000000000000000000000000000000000000000000084145f8412161561101257611011610ca4565b5b828205841483151761102757611026610ca4565b5b509291505056fea2646970667358221220b3a7536f60142f455f8e946ed3928cf30a0f16f0b26c33543de0ee942d0d730164736f6c63430008140033",
  "deployedBytecode": "0x608060405260043610610085575f3560e01c8063893d20e811610058578063893d20e81461012f5780639e87a5cd14610159578063b60d428814610183578063be2693f01461018d578063d7b4750c146101a357610085565b80630343fb25146100895780630d8e6e2c146100c55780633ccfd60b146100ef5780636b69a59214610105575b5f80fd5b348015610094575f80fd5b506100af60048036038101906100aa9190610aeb565b6101df565b6040516100bc9190610b2e565b60405180910390f35b3480156100d0575f80fd5b506100d9610225565b6040516100e69190610b2e565b60405180910390f35b3480156100fa575f80fd5b506101036102b9565b005b348015610110575f80fd5b506101196104d3565b6040516101269190610b2e565b60405180910390f35b34801561013a575f80fd5b506101436104e0565b6040516101509190610b56565b60405180910390f35b348015610164575f80fd5b5061016d610507565b60405161017a9190610bca565b60405180910390f35b61018b61052f565b005b348015610198575f80fd5b506101a1610662565b005b3480156101ae575f80fd5b506101c960048036038101906101c49190610c0d565b6108e0565b6040516101d69190610b56565b60405180910390f35b5f60015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b5f60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b8152600401602060405180830381865afa158015610290573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102b49190610c4c565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461033e576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f5b5f805490508110156103e0575f8082815481106103605761035f610c77565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505f60015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055505080806103d890610cd1565b915050610340565b505f67ffffffffffffffff8111156103fb576103fa610d18565b5b6040519080825280602002602001820160405280156104295781602001602082028036833780820191505090505b505f908051906020019061043e9291906109eb565b505f7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161048490610d72565b5f6040518083038185875af1925050503d805f81146104be576040519150601f19603f3d011682016040523d82523d5f602084013e6104c3565b606091505b50509050806104d0575f80fd5b50565b6802b5e3af16b188000081565b5f7f0000000000000000000000000000000000000000000000000000000000000000905090565b5f60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b188000061056d60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461092390919063ffffffff16565b10156105ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a590610de0565b60405180910390fd5b3460015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282546105fa9190610dfe565b925050819055505f33908060018154018082558091505060019003905f5260205f20015f9091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106e7576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f8080548060200260200160405190810160405280929190818152602001828054801561076657602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161071d575b505050505090505f5b81518110156107ec575f82828151811061078c5761078b610c77565b5b602002602001015190505f60015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055505080806107e490610cd1565b91505061076f565b505f67ffffffffffffffff81111561080757610806610d18565b5b6040519080825280602002602001820160405280156108355781602001602082028036833780820191505090505b505f908051906020019061084a9291906109eb565b505f7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161089090610d72565b5f6040518083038185875af1925050503d805f81146108ca576040519150601f19603f3d011682016040523d82523d5f602084013e6108cf565b606091505b50509050806108dc575f80fd5b5050565b5f8082815481106108f4576108f3610c77565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b5f8061092e8361095d565b90505f670de0b6b3a764000085836109469190610e31565b6109509190610e9f565b9050809250505092915050565b5f808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156109a8573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109cc9190610f41565b5050509150506402540be400816109e39190610fb8565b915050919050565b828054828255905f5260205f20908101928215610a61579160200282015b82811115610a60578251825f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a09565b5b509050610a6e9190610a72565b5090565b5b80821115610a89575f815f905550600101610a73565b5090565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610aba82610a91565b9050919050565b610aca81610ab0565b8114610ad4575f80fd5b50565b5f81359050610ae581610ac1565b92915050565b5f60208284031215610b0057610aff610a8d565b5b5f610b0d84828501610ad7565b91505092915050565b5f819050919050565b610b2881610b16565b82525050565b5f602082019050610b415f830184610b1f565b92915050565b610b5081610ab0565b82525050565b5f602082019050610b695f830184610b47565b92915050565b5f819050919050565b5f610b92610b8d610b8884610a91565b610b6f565b610a91565b9050919050565b5f610ba382610b78565b9050919050565b5f610bb482610b99565b9050919050565b610bc481610baa565b82525050565b5f602082019050610bdd5f830184610bbb565b92915050565b610bec81610b16565b8114610bf6575f80fd5b50565b5f81359050610c0781610be3565b92915050565b5f60208284031215610c2257610c21610a8d565b5b5f610c2f84828501610bf9565b91505092915050565b5f81519050610c4681610be3565b92915050565b5f60208284031215610c6157610c60610a8d565b5b5f610c6e84828501610c38565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f610cdb82610b16565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610d0d57610d0c610ca4565b5b600182019050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b5f81905092915050565b50565b5f610d5d5f83610d45565b9150610d6882610d4f565b5f82019050919050565b5f610d7c82610d52565b9150819050919050565b5f82825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f7265204554482100000000005f82015250565b5f610dca601b83610d86565b9150610dd582610d96565b602082019050919050565b5f6020820190508181035f830152610df781610dbe565b9050919050565b5f610e0882610b16565b9150610e1383610b16565b9250828201905080821115610e2b57610e2a610ca4565b5b92915050565b5f610e3b82610b16565b9150610e4683610b16565b9250828202610e5481610b16565b91508282048414831517610e6b57610e6a610ca4565b5b5092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f610ea982610b16565b9150610eb483610b16565b925082610ec457610ec3610e72565b5b828204905092915050565b5f69ffffffffffffffffffff82169050919050565b610eed81610ecf565b8114610ef7575f80fd5b50565b5f81519050610f0881610ee4565b92915050565b5f819050919050565b610f2081610f0e565b8114610f2a575f80fd5b50565b5f81519050610f3b81610f17565b92915050565b5f805f805f60a08688031215610f5a57610f59610a8d565b5b5f610f6788828901610efa565b9550506020610f7888828901610f2d565b9450506040610f8988828901610c38565b9350506060610f9a88828901610c38565b9250506080610fab88828901610efa565b9150509295509295909350565b5f610fc282610f0e565b9150610fcd83610f0e565b9250828202610fdb81610f0e565b91507f800000000000000000000000000000000000000000000000000000000000000084145f8412161561101257611011610ca4565b5b828205841483151761102757611026610ca4565b5b509291505056fea2646970667358221220b3a7536f60142f455f8e946ed3928cf30a0f16f0b26c33543de0ee942d0d730164736f6c63430008140033",
  "devdoc": {
    "author": "Patrick Collins",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {
      "getAddressToAmountFunded(address)": {
        "params": {
          "fundingAddress": "the address of the funder"
        },
        "returns": {
          "_0": "the amount funded"
        }
      }
    },
    "title": "A sample Funding Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "Funds our contract based on the ETH/USD price"
      },
      "getAddressToAmountFunded(address)": {
        "notice": "Gets the amount that an address has funded"
      }
    },
    "notice": "This contract is for creating a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 67,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 71,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 74,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}